[{"name": "app.py", "content": "import pandas as pd\nimport plotly.express as px\nimport seaborn\nfrom shiny import reactive\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly, render_altair\n# import altair as alt\nfrom palmerpenguins import load_penguins\n\npenguins_df = pd.DataFrame(load_penguins())\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\"selected_attribute\", \"Attribute\", [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bins\", 20)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bins\", 1, 100, 20)\n    ui.input_checkbox_group(\"selected_species_list\", \"Species\", [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=[\"Adelie\"], inline=True)\n    ui.hr()\n    ui.a(\"GitHub\", href=\"https://github.com/brianpereboom/cintel-02-data\", target=\"_blank\")\n\nwith ui.layout_columns():\n    @render.data_frame\n    def table():\n        return render.DataTable(filtered_data())\n        \n    @render.data_frame\n    def grid():\n        return render.DataGrid(filtered_data())\n        \nwith ui.layout_columns():\n    \n    @render_plotly\n    def plotly_hist():\n        return px.histogram(filtered_data(), x=input.selected_attribute.get(),\\\n            nbins=input.plotly_bin_count.get())\n\n    @render.plot()\n    def seaborn_hist():\n        return seaborn.histplot(filtered_data(), x=input.selected_attribute.get(),\\\n            bins=input.seaborn_bin_count.get())\n\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Scatterplot: Species\")\n    \n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(filtered_data(), x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\n\n# with ui.card(full_screen=True):\n\n#     ui.card_header(\"Altair Ridgeline Plot\")\n    \n#     @render_altair\n#     def altair_ridgeline():\n\n#         attribute = input.selected_attribute.get().split('_')\n#         for w, word in enumerate(attribute[:-1]):\n#             attribute[w] = word.capitalize()\n#         attribute[-1] = '(' + attribute[-1] + ')'\n#         attribute = ' '.join(attribute)\n\n#         filtered_db = filtered_data()\n#         penguins_data = {}\n#         for island in filtered_db['island'].unique():\n#             penguins_data[island] = filtered_db[filtered_db['island'] == island][input.selected_attribute.get()]\n#         penguins_data = pd.DataFrame(penguins_data)\n\n#         height = 25\n#         step = 1000 * input.ridgeline_height()\n\n#         return (\n#             alt.Chart(penguins_data).transform_fold( \n#                 list(penguins_data.keys()), \n#                 as_=['Columns', 'Values'] \n#             ).mark_area(\n#                 interpolate='monotone',\n#                 fillOpacity=0.25,\n#                 stroke='lightgray',\n#                 strokeWidth=0.1\n#             ).encode( \n#                 alt.X(\n#                     'Values:Q',\n#                     bin=True,\n#                     title = attribute,\n#                     scale=alt.Scale(clamp=True)\n#                 ),\n#                 alt.Y(\n#                     'count()',\n#                     stack=None,\n#                     scale=alt.Scale(range=[height, -step]),\n#                     axis=None\n#                 ),\n#                 alt.Color('Columns:N'),\n#                 alt.Row(\n#                     \"Columns:N\",\n#                     title=None,\n#                     header=alt.Header(labelAngle=0, labelAlign=\"left\")\n#                 )\n#             ).properties(\n#                 bounds=\"flush\",\n#                 height=height,\n#                 width=600\n#             ).configure_facet(\n#                 spacing=0\n#             ).configure_view(\n#                 stroke=None\n#             )\n#         )\n\n#     @render.ui\n#     def zoom_slider():\n#         return ui.input_slider(\"ridgeline_height\", \"Zoom\", 0, 1, 0.25, step=0.01)\n\n#     @reactive.effect\n#     @reactive.event(input.ridgeline_height)\n#     def zoom_text():\n#         ui.insert_ui(\n#             ui.p(f\"Scale: {input.ridgeline_height()}!\"),\n#             selector=\"#ridgeline_height\",\n#             where=\"afterEnd\"\n#         )\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df['species'].isin(input.selected_species_list.get())]\n", "type": "text"}]